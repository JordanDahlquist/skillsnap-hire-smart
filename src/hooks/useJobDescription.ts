
import { useState, useEffect } from "react";
import { useGenerateMiniDescription } from "./useGenerateMiniDescription";
import { Job } from "@/types";

export const useJobDescription = (job: Job, onJobUpdate: () => void) => {
  const [isGeneratingDescription, setIsGeneratingDescription] = useState(false);
  const { generateMiniDescription } = useGenerateMiniDescription();

  useEffect(() => {
    const autoGenerateDescription = async () => {
      if (!job.ai_mini_description && !isGeneratingDescription) {
        setIsGeneratingDescription(true);
        try {
          const roleType = job.employment_type || job.role_type;
          const miniDescription = await generateMiniDescription({
            id: job.id,
            title: job.title,
            description: job.description,
            role_type: roleType,
          });

          if (miniDescription) {
            onJobUpdate();
          }
        } catch (error) {
          console.error('Error auto-generating description:', error);
        } finally {
          setIsGeneratingDescription(false);
        }
      }
    };

    autoGenerateDescription();
  }, [job.id, job.ai_mini_description, job.title, job.description, job.employment_type, job.role_type, generateMiniDescription, onJobUpdate, isGeneratingDescription]);

  const getDisplayDescription = () => {
    if (isGeneratingDescription) {
      return "Generating AI description...";
    }

    if (job.ai_mini_description) {
      return job.ai_mini_description;
    }
    
    return job.description.length > 100 
      ? job.description.substring(0, 100) + "..." 
      : job.description;
  };

  return {
    isGeneratingDescription,
    getDisplayDescription
  };
};
