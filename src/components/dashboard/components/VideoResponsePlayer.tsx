
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Play, Pause, Volume2, VolumeX, Maximize, FileText } from "lucide-react";
import { VideoTranscript } from "@/types/supabase";

interface VideoResponse {
  question: string;
  answer: string;
  answerType?: string;
  videoUrl?: string;
  videoFileName?: string;
  videoFileSize?: number;
}

interface VideoResponsePlayerProps {
  response: VideoResponse;
  questionIndex: number;
  transcript?: VideoTranscript;
}

export const VideoResponsePlayer = ({ response, questionIndex, transcript }: VideoResponsePlayerProps) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [isMuted, setIsMuted] = useState(false);

  // Debug logging for transcript availability
  console.log('VideoResponsePlayer Debug:', {
    questionIndex,
    hasTranscript: !!transcript,
    transcript: transcript ? {
      questionIndex: transcript.questionIndex,
      transcriptLength: transcript.transcript?.length,
      confidence: transcript.confidence,
      processedAt: transcript.processedAt
    } : null,
    videoUrl: response.videoUrl
  });

  const formatFileSize = (bytes?: number) => {
    if (!bytes) return 'Unknown size';
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 Bytes';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
  };

  const handleVideoClick = (action: 'play' | 'pause' | 'mute' | 'unmute' | 'fullscreen') => {
    const video = document.querySelector(`video[data-question="${questionIndex}"]`) as HTMLVideoElement;
    if (!video) return;

    switch (action) {
      case 'play':
        video.play();
        setIsPlaying(true);
        break;
      case 'pause':
        video.pause();
        setIsPlaying(false);
        break;
      case 'mute':
        video.muted = true;
        setIsMuted(true);
        break;
      case 'unmute':
        video.muted = false;
        setIsMuted(false);
        break;
      case 'fullscreen':
        if (video.requestFullscreen) {
          video.requestFullscreen();
        }
        break;
    }
  };

  const downloadTranscript = () => {
    if (!transcript) return;

    const transcriptContent = `Question: ${response.question}

Transcript:
${transcript.transcript}

Metadata:
- Confidence Score: ${Math.round(transcript.confidence * 100)}%
- Processed At: ${new Date(transcript.processedAt).toLocaleString()}
- Question Index: ${transcript.questionIndex + 1}
${transcript.videoUrl ? `- Video URL: ${transcript.videoUrl}` : ''}

Generated by AI Video Transcription Service`;

    const blob = new Blob([transcriptContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    
    // Determine source type for filename
    const source = response.videoUrl?.includes('skills') ? 'skills' : 'interview';
    link.download = `transcript-${source}-q${questionIndex + 1}.txt`;
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  if (response.answerType !== 'video' || !response.videoUrl) {
    return (
      <Card className="bg-card border border-border shadow-sm">
        <CardHeader className="pb-3">
          <CardTitle className="text-base text-foreground">
            Question {questionIndex + 1}
          </CardTitle>
          <p className="text-sm text-muted-foreground">{response.question}</p>
        </CardHeader>
        <CardContent>
          <p className="text-foreground whitespace-pre-wrap">{response.answer}</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="bg-card border border-border shadow-sm">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <CardTitle className="text-base mb-2 text-foreground">
              Question {questionIndex + 1}
            </CardTitle>
            <p className="text-sm text-muted-foreground mb-3">{response.question}</p>
            <div className="flex items-center gap-2 flex-wrap">
              <Badge variant="secondary" className="bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200">
                Video Response
              </Badge>
              {response.videoFileSize && (
                <Badge variant="outline" className="text-xs">
                  {formatFileSize(response.videoFileSize)}
                </Badge>
              )}
              {transcript ? (
                <Badge variant="outline" className="text-green-600 text-xs dark:text-green-400">
                  Transcript Available
                </Badge>
              ) : (
                <Badge variant="outline" className="text-orange-600 text-xs dark:text-orange-400">
                  No Transcript
                </Badge>
              )}
            </div>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="relative bg-black rounded-lg overflow-hidden">
          <video
            data-question={questionIndex}
            src={response.videoUrl}
            className="w-full max-h-80 object-contain"
            controls
            preload="metadata"
            onPlay={() => setIsPlaying(true)}
            onPause={() => setIsPlaying(false)}
            onVolumeChange={(e) => setIsMuted((e.target as HTMLVideoElement).muted)}
          >
            Your browser does not support the video tag.
          </video>
        </div>
        
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2 flex-wrap">
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleVideoClick(isPlaying ? 'pause' : 'play')}
              className="flex items-center gap-1"
            >
              {isPlaying ? (
                <Pause className="w-4 h-4" />
              ) : (
                <Play className="w-4 h-4" />
              )}
              {isPlaying ? 'Pause' : 'Play'}
            </Button>
            
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleVideoClick(isMuted ? 'unmute' : 'mute')}
              className="flex items-center gap-1"
            >
              {isMuted ? (
                <VolumeX className="w-4 h-4" />
              ) : (
                <Volume2 className="w-4 h-4" />
              )}
            </Button>
            
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleVideoClick('fullscreen')}
              className="flex items-center gap-1"
            >
              <Maximize className="w-4 h-4" />
              Fullscreen
            </Button>

            {transcript && (
              <Button
                variant="outline"
                size="sm"
                onClick={downloadTranscript}
                className="flex items-center gap-1 border-green-200 text-green-700 hover:bg-green-50 dark:border-green-800 dark:text-green-400 dark:hover:bg-green-950"
                title="Download transcript as text file"
              >
                <FileText className="w-4 h-4" />
                Transcript
              </Button>
            )}
          </div>
          
          {response.videoFileName && (
            <p className="text-xs text-muted-foreground">
              {response.videoFileName}
            </p>
          )}
        </div>
      </CardContent>
    </Card>
  );
};
